// Layout Grid

var React = require('react');
var objectAssign = require('object-assign');


var Layout = React.createClass({
  propTypes: {
    
    // colNum, ex 12
    cols: React.PropTypes.number,
    
    // {name: [colWidth, colWidth, colWidth], name: [colWidth, colWidth, colWidth]}, ex {lg: [7, 3, 2], md: [4, 4, 4], xs: [12, 12, 12]}
    widths: React.PropTypes.object,
    
    // {name: pxValue, name: pxValue}, ex {lg: 1200, md: 990, sm: 750, xs: 480, xxs: 380}
    breakpoints: React.PropTypes.object,
    
    // {name: [colN, colN, colN], name: [colN, colN, colN]}, ex {md: [2, 1, 3], sm: [1, 2, 3]}
    order: React.PropTypes.object
  
  },
  
  getChildWidth: function(i, breakpoint) {
		var width = ((this.props.widths[breakpoint][i] * 100 )/ this.props.cols)+'%';
    return width;
  },
	
	getBreakpoint: function() {
		var vwidth = window.innerWidth,
				bKeys = Object.keys(this.props.breakpoints),
				breakpoint;
				
		bKeys.forEach( function(key, i) {	
			if(this.props.breakpoints[key] > vwidth) {
				var prevKey = (i === 0 ? 0 : i-1);
				breakpoint = bKeys[prevKey];
			} else if(vwidth > this.props.breakpoints.lg) {
				breakpoint = 'lg';		
			} 
		}, this);	
		return breakpoint;
	},
	
  style: {
    border: "1px solid #ff0000",
    overflow: "auto"
  },
  
	handleResize: function(e) {
		this.setState({style: { border: '1px solid green'}});
  },
	
  render() {
    
		var breakpoint = this.getBreakpoint();
		
		 var children = React.Children.map(this.props.children, function(child, i) {
		 		var width = this.getChildWidth(i, breakpoint);				
				return React.cloneElement(child, {style: {width: width, float: 'left'}})
    }, this);
		
    return (
      <div style={this.style}>
        {children}
      </div>
    );
  }
});


export default Layout;