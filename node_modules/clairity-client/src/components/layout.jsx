import React from 'react'
import Settings from './settings'


var Layout = React.createClass ({
  propTypes: {
    
    // colNum, ex 12
    cols: React.PropTypes.number,
    
    // {name: [colWidth, colWidth, colWidth], name: [colWidth, colWidth, colWidth]}, ex {lg: [7, 3, 2], md: [4, 4, 4], xs: [12, 12, 12]}
    widths: React.PropTypes.object.isRequired,
    
    // {name: pxValue, name: pxValue}, ex {lg: 1200, md: 990, sm: 750, xs: 480, xxs: 380}
    breakpoints: React.PropTypes.object,
    
    // {name: [colN, colN, colN], name: [colN, colN, colN]}, ex {md: [2, 1, 3], sm: [1, 2, 3]}
    order: React.PropTypes.object
  
  },
  
  getChildWidth: function(i, breakpoint) {
    
    if (this.props.widths[breakpoint][i]) {
      if (typeof this.props.widths[breakpoint][i] === 'number') {
        var width = ((this.props.widths[breakpoint][i] * 100 )/ this.props.cols)+'%';
      } else if (this.props.widths[breakpoint][i] !== 'rest') {
        var width = this.props.widths[breakpoint][i];
      } else {
        var width = 'rest';
      }
    } 
    
    return width;
  },
  
  getChildWidths: function(){
  
    var percWidths = [];
    var breakpoint = this.getBreakpoint();
    var count = this.props.children.length;
    
    for(var i=0;i<count;i++) {
		 		var width = this.getChildWidth(i, breakpoint);
        percWidths.push(width);
    }
    
    if (percWidths.indexOf("rest") > -1) {
      percWidths.forEach(function(w, i){
      },this);
    }
    
    return percWidths;
  },
	
	getBreakpoint: function() {
		var vwidth = window.innerWidth,
				bKeys = Object.keys(this.props.breakpoints),
				breakpoint;
				
		bKeys.forEach( function(key, i) {	
			if(this.props.breakpoints[key] > vwidth) {
				var prevKey = (i === 0 ? 0 : i-1);
				breakpoint = bKeys[prevKey];
			} else if(vwidth > this.props.breakpoints.lg) {
				breakpoint = 'lg';		
			} 
		}, this);	
		return breakpoint;
	},
	
  style: {
    width: '100%',
    overflow: "auto",
  },
  
  componentDidMount: function() {
    window.addEventListener('resize', this.handleResize);
  },
  
  getDefaultProps: function() {   
    return {
      breakpoints: Settings.breakpoints,
      cols: Settings.cols
    }
  },
  
  getInitialState: function() {
    return { cWidths: this.getChildWidths() };
  },
  
	handleResize: function() {
    this.setState({cWidths: this.getChildWidths() });
  },
	
  render: function() {	
		var children = React.Children.map(this.props.children, (child, i) =>
				React.cloneElement(child, {style: {width: this.state.cWidths[i], float: 'left'}})
    );
		
    return (
      <div style={this.style}>
        {children}
      </div>
    );
  }
});

export default Layout;